<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Location outspeaks solution.</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://svlic.github.io/"/>
  <updated>2020-04-02T07:50:28.731Z</updated>
  <id>http://svlic.github.io/</id>
  
  <author>
    <name>svlitlec</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「重构」个人信息系统格局</title>
    <link href="http://svlic.github.io/2020/04/01/%E3%80%8C%E9%87%8D%E6%9E%84%E3%80%8D%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%A0%BC%E5%B1%80/"/>
    <id>http://svlic.github.io/2020/04/01/%E3%80%8C%E9%87%8D%E6%9E%84%E3%80%8D%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E6%A0%BC%E5%B1%80/</id>
    <published>2020-04-01T12:00:03.000Z</published>
    <updated>2020-04-02T07:50:28.731Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「重构」个人信息系统格局"><a href="#「重构」个人信息系统格局" class="headerlink" title="「重构」个人信息系统格局"></a>「重构」个人信息系统格局</h1><p>高并发的信息流前，表现一如既往一天世界。翻滚眉头和眼睛，不知是挤出「辛酸泪」，还是看够了「荒唐言」。<br>我要告诉你从哪儿开始可以建立自己的信息系统。或许你会发现，真正「荒唐」的 … 只有格局。</p><a id="more"></a><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>依旧，标题有两层含义：用什么样的格局去「重构」既有的 —— 朴素的个人信息系统，以及「格局」本身的进化 —— 对信息理解与认识的「疏略」。<br>我不会告诉你 Ben Thompson 或者 Paul Graham 的文章是否真的值得一读 —— 不跟随；就像我不知道 The Verge 或者 … 或者 Medium「时至今日」还是不是值得依赖的平台 —— 不责怪。<br>我要说的是，如果你相信海量信息摄入的价值 —— 或因「生活所迫」能御八面来风，比如大包大揽的 oneman、看菜下饭的 freelancer；或因天赋异禀，就是「什么都略懂一点」，比如 … 比如我，可我倒是不怎么「异禀」。<br>那你应该知道，这个世界上，有很多人做好「一」就能圆满的 —— 可我们这样的人注定了做不了「一」，只能做 … 我的意思是先「从一到二」。</p><h2 id="从一到二"><a href="#从一到二" class="headerlink" title="从一到二"></a>从一到二</h2><p>从一到二，是指对于不容易琢磨透的「域」，比如「信息」或者「学习」，尝试用两套 formal logic 去认识它 —— 这其实是很自然的 … 甚至就挂在口上「我一个文科生，你不能 …」，虽然其实也是这些人在叫程序员帮忙修电脑。<br>作为「先烈」，常被问怎么学「算法」。我问是算法与数据结构，他狠狠点头；我叹气问所以是「算法」还是「数据结构」，他一愣 —— 通用性高的「方法」不是没有，但即便只是「由二合一」，也太容易失之偏颓。<br>他眼中散出妖异的光芒（我脑补的）说这样，那不如说「三」吧 … 坦率地说，其实不超过「十七」我应该都能死记住。无邪的笑脸（我脑补的）。<br>我狠狠吞下一口口水，压制着从下腹部翻滚出的一股热浪。「三」是不会「三」的，这辈子都不会 … 只能勉强靠着「二」维持生活的样子。因为 … 因为我不会。<br>你要知道，「从一到二」是足够不容易的过程了，「二」就已经足以超过 … 你明白我的意思。</p><p>不信？信不信我再跟你聊一个「从一到二」的例子。<br>以前提到过技术「分层」：简单分成数学、模型、算法、代码、设计、架构几个层次堆叠，一般人会专注在某一层上。这样的结果是，能够从一层迁移到相邻一层的能力很有价值；在某一层无所不知，又能层层迁移的所谓「T」型人才更为难得。</p><p>我要说的是，成为「T」的路径（其实我已经尽量避免歧义了 …）可以有两种 —— 这还不算上考虑「有向性」。基于状态的抽象设计或者软件工程方法，相较于基于实践的反馈修正或者具体过程，在认知、应用的有序性的要求与学习手段上是高度差异的，同样差异的还有从算法（不管是经典的还是深度学习的）倒推数学的归纳过程与过程中模块的正向实现。<br>可以想象的是，如果你都没有搞明白想成为哪种「T」，就贸然做「T」，会走多少弯路，即便像个大人一样「全都要」—— 虽然在我看来，曲折前行不是件坏事，但对你是不利的。</p><p>「从一到二」在对目标很可能正确的分解与确定上能提供不少帮助，你会看到的是更自然和符合直觉。</p><h2 id="横贯八方"><a href="#横贯八方" class="headerlink" title="横贯八方"></a>横贯八方</h2><p>把赋与信息价值的目标「从一到二」：有目的的、碎片化的。更进一步，有目的的研究其实并不依赖于系统，只需要系统性「方法」；碎片化的 killtime 才需要信息「系统」产生足够的价值。<br>一个有趣的问题是，如果你碰巧「沦为」一位工程师，怎么向 Last generation 介绍自己的职业，或者说你更像一个科学家还是更像一个 … 木匠。</p><p>答案不重要，你要知道的是，木匠都是手把手「身教」出来的，中间有无数的做事方式：一种说法是，人本身就是最精密的仪器，在实践过程中自然会发生复杂而未知的变化以适应。至于 —— 可不可信 … 你知道的，沾上点自然的事儿，总带着点儿不可说的意味。可信的是不少人因为缺少这些「做事方式」，表现出常犯一些忌讳的基础错误。<br>耐人寻味的是，有多少「写代码的」被手把手教过，或是即便「眼对视频」地研究过 … 研究过 Tourist 是怎么「敲键盘」的。<br>你也不用急着去看某人「敲键盘」—— 可能从根儿上你就不适合做这个事儿，就像你可能不怎么担心/在意成为科学家。你亟需考虑的是我们的「荒唐」为什么就发生在「碎片」中。</p><p>「横」没有「纵」出名，只是因为看见「纵」的人更多。因为模仿比演绎「低级」，所以「横」被忽视，那我就来告诉你「横贯八方」—— 怎么建一个系统。但 … 不要急，别忘了我要告诉你的还有「格局」。在构建通用的信息格局中，你也会进一步发现「从一到二」的力量。</p><h2 id="通用信息格局"><a href="#通用信息格局" class="headerlink" title="通用信息格局"></a>通用信息格局</h2><h3 id="信息的结构框架"><a href="#信息的结构框架" class="headerlink" title="信息的结构框架"></a>信息的结构框架</h3><h4 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h4><p>信息中有效的那部分能有多少价值完全受限于你的「圈儿」—— 这使得发现信息本身有价值高低非常困难。它可能关乎品味、关乎洞察力；具体一些，信息是原生的，还是添油儿加醋儿腌渍过解冻过。如果身边几乎所有人都在查阅三年前的 CSDN 做事情，那要多出淤泥而不染才能 … 你要知道，事实上我订阅了不下 30 个 CSDN 博客。所以 … 所以我要说的是，或无心插柳、或高人指点、或落下悬崖碰到一只须发皆白的老猕猴，哐当从肚子里掏出一本书，告诉你读了它你天下无敌 —— 你才能知道原有的信息受限。</p><p>我 … 可惜我不是「高人」，也不至于「掏心置肺」，就算「蓄意」地告诉你技术「圈儿」的国外独立博客正悄然变化，要真说服你去瞅瞅，还得不作声色地提起几条什么「街」儿、什么「谷」儿。<br>可怜声色的作用也几乎局限于此，「考据」如果能解决所有信息问题，那也挺枯燥的。事实是 —— 没有银弹，很多知识不是读一本好书能获取的，甚至不信邪非要 … 读两本。很常见的现象是，在一个不是特别火热的论坛的第三页的回复中，一个插科打诨的故事比翻阅千页「著作」得到的答案更接近真相。这不局限在信息技术学科，至少关于稍微「新」一点儿的知识 —— 你想知道聊天区的主播是怎么涨粉的么？你一定享着比这更像「知识」的「知识」罢。<br>比如挑选「好书」，可你能「沦为」、想成为如何人物完全取决于现在的光儿、身边的景儿。「格局」也就无从谈起，只要「社会工程」觥筹交错、支起个酒瓶比赛往里面扔筷子 —— 这我就洋盘了。</p><p>同样重要的事实是，新的价值是能在思考和加工中产生的。可能是由一个「全体」的几个宏观方法拼凑出的相当不错的一个「局部」。<br>朴素地看，diversity 也好、「全体」也好，基础就是数量。在有目的的研究中，最常见的手段是对于先验问题的细分与选择，以此实现局部数量的「丰富」；另一方面，这样的「丰富」其实是「克制」的 —— 大量不切题但也有效的信息会被抛开。而对于「问题」后验的情况，就只有正面迎敌「横贯八方」了。<br>你也应该发现，如果存在衍生价值的上限，它依然受限于有效信息的原生价值，至少对我是存在的。如果你和我一样「腼腆」，那尝试氪金以抬高上限或许是最有效的社会工程方法了。当然这本身也讲方法，比如 … 比如给你最喜欢的作者打赏 —— 尤其是「腼腆」的个别作者。</p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p>第二点是获取有效信息的效率。和依靠「模仿」（比如从白猴子那儿拿到的桃子 … 哦不 … 秘籍，也不会去管什么「理解」，一把拿来就是抱着躺下一顿狂背）与系统性「方法」（比如类比）的兑现有效信息价值过程不同，有效信息的传递过程是很结构化的。<br>一个常见说法是将受众从形式上分为视觉型和听觉型。衍生出个很有意思的问题：大段文字应该被看作一个「色块」还是「语言」的组合。如果你碰巧了解 Programming Language 或者编译原理、甚至深度学习，就知道只是转化「语义」的范式或顺序不同 —— 有的人默读，要额外「文字转语音」；有的人「光速」获取信息，直接将符号和物理模型对应。但两者在普遍的结果上差异不大。<br>原因在于，有效信息的获取速率上限是媒介速率的下限。一个基础性的例子是，对于日语初学者的我来说：英文文献读不懂的时候，会去看英文视频，但是看不懂的日语文档，几乎不能指望看懂日语视频 —— 虽然我知道，很多时候你不需要看懂。重要的是，在这里，媒介速率的下限由形式变成了语言。</p><p>和之前的例子一样，如果不考虑受众获取效率的限制，那么传递同样有效的信息，维度越高，总信息量越大；密度与强度也就越低、冗余越多；当然，制作成本越高。<br>从受众的角度看，一个简单的模型被我称为「认知分层」(Recognition Hierarchy):优先级越高、认知强度越高、承受信息量越小 —— 虽然我没有在生物学上寻求过证据。<br>形式上朴素的结论就是，文字传递有效信息的效率最高。当然，绘制得过分「恰当」（图像的属性冗余少）的框线图也会比翻译糟糕的文字不知道高到哪里去。</p><p>我不敢说「多读书」的劝诫是否「用心良苦」还是「居心叵(po)测」。「格局」的含义在于，不拘泥于媒介或者形式。倒不是「为我所用」，而是「君子不器」。就像我相信如果一些万世之师在今天，也不会拘泥于出书立传，指不定搁儿哪儿直播呐。<br>你看，如果你碰巧学富五车、素蟫都被你饿得骂人，那「效率」对你从来不是限制。视频、PowerPoint、animation 都给了更大的空间。数学最好的大学会开展面试 —— 文字和代码都可以复制粘贴，我想你必然见过一些人「著作等身」、甚至 … 但当面交流三句就支支吾吾不太确定，对本质完全没有理解。在信息的「圈儿」里善良地看，可能只是搜索「方法」无敌罢。  </p><p>事实上，对特定「域」、尤其是复杂的，获取有效信息的速率存在随数量上升的过程。所以教科书的章节信息密度通常是线性增长的；而对于后验未知的知识网络，很难控制有效信息的密度，所以高效的搜索策略一定会消耗大量空间。<br>「横贯八方」在「先验」的工作模式视角下，你可能随时保持着两百多个问题寻求解答 —— 这有些抽象。具体来说，当你看到一篇文章的时候，考虑的是它「有点意思」，而不是它「是否切题」，因为本就没有「题」。结果上看，当「有点意思」的文章积攒到了一定数量，那么从中获得有效信息也会远远多于零敲碎打的代数和；直觉上，即便你只看了一篇公众号小文章，再去看另一篇相关的也会得到效率的提升。  </p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>所以，信息的结构框架上，你该做的核心始终是提升数量，尤其对于后验的、碎片化的。<br>这就是世界的简单直白。你受困于数量，想要脱困就要驾驭数量 —— 我一开始告诉你的就是，需要重建的是格局：遇见大量信息不意味着有能力处理那么多信息。换句话说，你不得不依赖一些外部手段。 </p><h3 id="信息的流程框架"><a href="#信息的流程框架" class="headerlink" title="信息的流程框架"></a>信息的流程框架</h3><p>对信息结构的解耦，是希望你知道的；为什么能实现松耦合；是希望你能学会的。我还要说的 —— 你应该知道的是：在实际的信息处理流程中，不同范式是周期交替的。</p><ol><li>literati vs literature（作者与作品）<br>传统的信息价值评估过程中，「信息-人」的循环节不断出现。看到一篇文章不错，会看看它作者的其它文章或订阅作者。算法则是取代了「人」，在流程上并没有结构性的改变。<br>算法的优点在于，在「预学习」的过程中，有更高的效率。逻辑上，对于严谨研究，算法很难保证「充分」；技术上，非确定性的测试无法判断内容本身的意义 —— 很多时候只是外部手段，比如竞价，比如 SEO。另一方面，兴趣是不稳定变化的；技术上 SaaS 模型闭环的实时性难度很大，使得算法对「订阅-推送」的简单增量模式并没有绝对优势。<br>一个耐人寻味的问题是，如果周期有终点，你是在寻找一个供模仿的「精英」还是追求内容本身，或只是在意过程，蓄意去训练终端模型。</li><li>exploration vs evaluation（探索与评估）<br>信息价值的探索与评估是在日常信息流中最常见的循环。没有意外的话，你的日常会经常找东西看、判断好不好看、看 —— 意外的话，那就是异禀。<br>一个耐人寻味的问题是，打开 12 秒内会关掉的内容占据了多大比例。</li><li>prior vs posterior（先验与后验）<br>对于我千字说明的信息结构框架，你说，说到底不就是「海量阅读」么。你看，你还是在「归纳」，记着要有「格局」。<br>「横贯八方」看着很美，但外部系统中的内容在最后总是通过研究性方法转化为内部系统：你总不能指望每天读两篇小文章，过了几年就突然「通了」。至少在搞明白 200 多个问题以后，尝试归纳出「系统」是离不开先验的查漏补缺的。<br>一个相反的周期是，研究性过程通常是求证导向的。所以信息原生价值的最高点就是在课题设立之初，之后才重新赋予新价值：总价值的变化是受监控的。「横贯八方」会在可能被你抛弃的问题上挥霍，不管是出于外部条件限制还是偏离问题的狭义 —— 可谁知道这些挥霍能否在某个时刻汇聚呐。</li><li>rationalism vs empiricism（理性与经验）<br>在处理上，理性需要经验的技巧，技巧需要理性的系统。<br>如果刚步入新环境，那你几乎不需要考虑体系，面对呼啸而来的新信息，上来就是一顿暴学；如果你在一个「域」浸淫已久，那借助外部系统才有可能保持高速进步。面对大量没有既成可靠知识体系的信息混杂，更需要自己建立信息系统 —— 一个局部野蛮，结构精细的系统。换句话说，你已经野霍霍生长太久了。<br>耐人寻味的问题是，如果目的是「进步」，是应该选择利用、打磨信息系统，还是在不那么年轻的时候去兑现其它的「挥霍」。</li></ol><p>如果真能寻出些味儿来，明白自己所处的位置，那就掌握了周期 —— 就像普遍的规则，你一旦掌握了周期，就总能掌握世界。</p><h2 id="信息系统"><a href="#信息系统" class="headerlink" title="信息系统"></a>信息系统</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>重构完格局，我们开始尝试重建系统。<br>在「海量阅读」的要求下，信息在结构与流程上的特性会暴露为这些问题：</p><h4 id="分散性"><a href="#分散性" class="headerlink" title="分散性"></a>分散性</h4><p>制作是信息成本中不可忽略的部分。制作成本越高，或者说维度越高，跨平台的相对代价就越低。所以通常视频的跨平台特性更好；因为技术发展，支撑平台数量上更少，内容也就更聚合。<br>但信息的特性是趋于分散的（保持一定的有序），聚合程度几乎只受制于应用技术的成本 —— 参考前些年遍地开花的 Podcast。内容成本比制作成本高得多的，反倒甚至不那么在乎跨平台效益：高成本又能保证高频繁的只有吃播之类 —— 恰是跨平台特性最好的，即便和其它同样精良但没有那么高频的生活类视频（比如云吸猫）相比。一个结果是，在一定专业化的领域，分散性本身可以作为相当可用的信息筛选条件。</p><p>所以商业上经营「圈儿」所创造的价值，在于降低获取分散信息的成本。一度有标榜，你只需要任意厮混一个大型平台，信息流就是充分完整的。当然我们看成果行不通 … 至少现在。尤其额外对形式上的高效有追求时，图文平台连接口一致性都几乎无法保证。</p><p>我要说的是，内容「圈儿」的画土分疆、对于聚合与规模的程度控制，确实是兼顾成本的最优解。但是，这并不多妨碍把对外的接口做的相对开放可用 —— 对信息特性保持尊重，尤其在足够大、过分聚合的时候。你会看到，对信息不尊重的，关于「人」的体验也做不好，从不是因为过分慎重，只是吃不到经济：至于关乎经济的功能特性，上线甚至不需要经过灰度测试。<br>这，愿你不如我无能为力吧 —— 你也要知道的是，这些「免费」的内容服务成本很高，比如采集。对于作者个体、非周报新闻性质的内容，高质量内容常见的更新频率是 0.1 篇/周 —— 一两个月的周期。你可以想象，如果是一两年的周期，那你需要的信息源数量是什么样的，重要的是，这样的作者 … 这样的作者定有过人之处。所以想实现「海量阅读」，分散的信息源数量会更「海量」，不可能手动轮询。即便形式上已经是聚合的，能够坚持每天把一两百个公众号消息都扫一遍的人 … 那也不是凡人；内容上更已注定且被证明不存在通用性很高的服务。</p><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><p>所谓「天赋异禀」，在信息处理流程上的含义是，分层的 cache 容量更大。具体表现是，能够比一般人承受更强的信息密度；另外，在「探索与评估」周期切换时，能对上下文做更多的保存：做着 exploration 哼着蓝调，突然就被拉去 evaluation，回来还能继续写意地「探索」。<br>当工作模式切换频繁时，上下文切换的代价就变会得无法承受 —— 我相信我见过足够多「异禀」的人，也大都败给了「数量」。在开展较长时间的探索过程时，积压出大量的评估工作，且因为信息质量的连续性无法保证，很难估计未来的探索时间。结果是，不管是精力还是情绪都会受很大影响。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>信息技术带给我们的问题，自然也要从中找答案。</p><h4 id="分散性-1"><a href="#分散性-1" class="headerlink" title="分散性"></a>分散性</h4><p>对于分散性，除了在信息流上游完成聚合外，没有根本的解决方案。可操作的是避实就虚、加个中间层，让分散信息统一在相邻的物理空间 —— 你一定做过这样的事儿，传统意义上的中间层叫做「书签」或者「收藏夹」，甚至是专门开个只有一个人的孤独群聊。<br>虽然依赖外部工具几乎可以实现所有信息管理功能，比如标签与搜索，但「收藏夹」自身操作逻辑的线性化是无法规避的。即使在性能层面，如果你碰巧体验过双通道或者 16g 以上大小的内存，会发现操作速度有着不自然的显著提升，内容本身的呈现形式的一致性更无从谈起了。<br>重要的是，你需要一个有高度一致性的「收藏夹」，或者更时髦的说法，一个可持久化的消息队列：能够支撑相当数量的聚合信息源、海量的分散信息源的采集，能够支撑在多物理平台多形式的消费。</p><h4 id="上下文-1"><a href="#上下文-1" class="headerlink" title="上下文"></a>上下文</h4><p>相对丰富的层次也是流程重构的基础 —— 你得以在不同层实现不同模式的信息处理：批量完成 evaluation 后结束信息处理的请求，再开展时间更长的 exploration。如果你碰巧对 kernel 甚至网络略有了解的话，肯定看出些多路复用，或者时髦些的说法，事件驱动、异步io。是什么并不重要，甚至我蓄意地避免画出典型的 multi-plex —— 只是抽象层的不同。<br>从处理请求的服务端（系统）看也好，从处理信息的客户端（人）看也好。我要说的是，你要看到「评估与探索」过程本身运行时的同步性。避免上下文频繁切换消耗的基础是做好评估和探索的 isolation。朴素地看，在复用的主体上从基于事例变为基于模式。</p><h3 id="另一种解释"><a href="#另一种解释" class="headerlink" title="另一种解释"></a>另一种解释</h3><p>至此你可能豁然开朗了。但你也可能会说，我碰巧不太懂「消息队列」，也不怎么听过 Asynchronous I/O，该如何认识到问题是怎么被解决的？至少让我看到「改进」发生的空间吧。<br>结构上有层级、整齐的信息排列，这显然是一个效率「改进」—— 你可能会咕哝一句，说什么 …「美就是生产力」。<br>流程上的「改进」，可能只需要「一步」—— 提升信息流而非内容本身的优先级。如果你凑巧使用过闪念胶囊 … 算了，我猜没有那么多「如果」。破坏信息处理流程连续性的原因，外显的只是客户端登录、复制链接转发、返回上级菜单的「一步」。可以被剥离、控制、优化的「一步」。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><h4 id="系统实现"><a href="#系统实现" class="headerlink" title="系统实现"></a>系统实现</h4><p>外部系统的具体实现上，我使用 RSSHub + Tiny Tiny RSS 作为主要上游、对信息源轮询，通过设置的关键词正则过滤掉不关心的内容。如果你考虑自建 Really Simple Syndication 服务端，它依然是在功能完整性做的最好的，即便是用 php 写的。<br>客户端使用 Reeder 比较多，流程上几乎只实现扫一眼的 evaluation。手动选择有效信息全文发送至 Pocket，并半自动地打上标签。类似的选择比如 Instapaper，在完成度上都不是对手。<br>日常浏览中，利用 Firefox 插件（移动端通用），将有意思的信息全文保存至 Pocket 或直接处理摘录至 Joplin（支持命令行）。<br>Pocket 中的信息有两种消费方式。收藏的文章需要我「背诵」。摘录标记的部分定期导出到 Joplin，根据 Pocket 的标签与 Joplin 的标签和主题归类。<br>最后在合适的时候，用 Mak 消费这两类素材。</p><h4 id="实现依据"><a href="#实现依据" class="headerlink" title="实现依据"></a>实现依据</h4><p>我有必要告诉你选择的依据，因为显然万恶的资本主义不会给我广告费。甚至我还会告诉你，大多数操作都需要一个过分好的网络条件。还有，对于少数中文内容 Pocket 重排版会失效、只能使用网页模式。</p><p>采集成本很高，你可以选择自建也可以付费，比如 Feedly。也有一些规模不大或有点大的「圈子」有偿或无偿地提供类似的端到端服务，虽然就在昨天和今天，这样的服务甚至在法律上受到了考验。你也届已看到我在为 Reeder 与 Pocket Premium 付费，那为什么我会选择自己搭建 RSS 的服务端？当然是因为我可以 —— 坦率地说，其实所有的事儿我都可以，但确实有一些部分是愿意额外付费的。多源内容的重新排版和跨平台支持的特性，是不值得我用过分密集的劳动去实现的，何况确实做的足够好，甚至还几乎白送了对采集内容的持久化。</p><p>这不意味着，如果你对信息技术的落地鲜有了解，就只有全程氪金，事实上拼凑免费的服务也完全可以用 —— 我也是以此摸索过来的。重要的是，系统中的哪些特性对你是至关重要的，对你而言的一个表现可以是愿意为此付费。也就是说，氪金本身并不能帮你解决所有问题、捋清构建思路 —— 这也是让我始终相信「这世界会好的」的原因中的一个。在「加的不够多」的另一部分之外，确是有「加钱不可及」的。</p><p>独居的朋友换了个路由器，居然叫什么 …「八爪鱼」，问我能不能帮忙去「接个网线」。拍拍攒灰的工控机，我轻轻摇头（不晃肩膀的那种）不由感叹生命的残酷 … 绊子总是在你不注意的地方。随意甩去篇教程，便不在搭理求救的「 ！」与哭泣猫猫头（这事实上是很需要定力的，尤其是居然有很多我没见过的）。你看，即便是「接个网线」的、最简单的家庭网络系统，也需要你的「拼凑」。虽然 … 虽然也可以在白天让师傅帮忙装好。</p><p>但这不重要，重要的是，朴素地看，你可以为每个部分的服务氪金，甚至达到难以置信的好用，但你总要有自己的「格局」，即便对于外部系统。再好用的服务 —— 你可能每天读内参，也只是「圈儿」厉害，有效信息的价值比较高，处理范式上和转发养生广告并没有差别。「改进」总是需要举重若轻的判断，脚踏实地的规划。</p><h4 id="具体经验"><a href="#具体经验" class="headerlink" title="具体经验"></a>具体经验</h4><p>要说具体一点经验，是实现流程的物理隔离与保持各模块独立可用。你可能又想到些 4 个或 5 个或 6 个字母长的对象设计原则 —— 你知道我总尽量避免提起些没用的概念。前者的意义不言自明。当然，你也可以只改变自己的工作模式，不改变使用的「收藏夹」本身。后者在操作中保证了灵活性：有时看到好的过分的「秘籍」，恪守范式倒是不方便的，迫不及待就直接在 Reeder 上消费内容。另一方面，在具体方案落地的时候可用降低迁移成本，这是一个演进的过程。演进开始后的一个附加的好处是对于迁移的脱敏：正视原本朴素信息系统下的「积累」，而不仅靠「声色」作为改变的动力。</p><p>体会到的好处是：对于内容的管理主要基于「归纳」，是相当自然轻松的过程，而不那么严谨的知识系统产生的效果也不出意外得远远好于没有系统；外部信息总量的提升，使得价值观能够经常被复核和验证、包括修正；日常从「人找信息」变成「信息找人」，很少会「无聊」。</p><p>不足是：聚合信息产生价值的过程是较长且不能持续交付的。你可能会同时并行五个项目，在五个月后出成果，而不能一个月出一个项目；很难形成闭环。闭环的含义不是求之于文字呈现为文字，而是终端对源头有直接反馈。这可能不太好理解，但你一定不太会取关那些实际不怎么关注的公众号。还有上下游 Locality 的失效。外显的诸如从 Pocket 的标签到 Joplin 打赏标签时，出现的上层附加信息在下一层需要重复处理一次的情况。</p><p>对于你自己，可能需要额外注意的是心态的调整，不要把外部系统看作监工。</p><h3 id="演进"><a href="#演进" class="headerlink" title="演进"></a>演进</h3><p>问题面前，演进总是表现为「权宜」。现有的方案也确是我的「权宜」。熟悉我的朋友知道，对于信息流筛选这件事，我设计过一套无与伦比的交互方案，甚至还在最近调教了一下它的非线性动画。兴趣是还在的，但需要一点时间，毕竟 —— 当然，靠不靠我本来就是不靠谱的事儿。重要的是，我判断未来的系统是更端到端的、操作是更连贯的。你知道的，强行加一个中间层，总是看起来「徒增功耗」。</p><p>内容方面，增量和算法是依然是两个独立的解决方案：增量可控，算法有闭环。如果能把这两套方案真正结合而非搭配 —— 不相干的两套体系共用一个数据库，那会是改进。</p><h2 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h2><p>依例，用一个故事串起流程的主线。</p><p>忙碌的间隔，葱白手指一滑、葱葱睫毛一扫，便筛选了 1300 条信息 —— 零零散散统起来一天也不过 20 分钟。选出的四五十段，定期便是摘录和收藏；可能就在每天晚上，当然也含着其它或浏览或搜索到的。流过粗中有细的 pipeline、简单的归纳，知识大块地聚集、消费。<br>一日，突有神启，或是跨领域方法的化用、或是一种新颖的结构主线，他眉台一紧、肝火不要钱得往上窜，一手抓住乱窜灵感的后颈，一手便扫开桌上杂物、腾出些时间严肃研究、演绎出具有丰富细节的体系。<br>「胸怀大志、不好读书」的样子跃然纸上。可遗憾的是，他会去读书、甚至是长篇巨作 —— 只要有银弹，谁又愿意拿着木桩去肉搏呐。你要知道，甚至他还看电影：不是不拘一格，是别有格局。<br>饭桌上聊起个话题。都是熟透的人了，他也不藏巧于拙，三言流出些「洞察」、两句提到个精巧得让人拍大腿的视角。朋友们见惯不惯，却也不失惊讶或、或敞亮或不敞亮作惊讶说，没想到这你也略懂。他面带微笑，说什么都略懂一点生活更美好一点，便又多提了几句成果。<br>友若有所思状，举起筷子作指点江山，说你这些话可以去写篇小文章儿。他摇摇头，我们聊两句就是了，没有内涵的人才会去写文章，有内涵的都去直播了。友追问你不去直播么。他严肃地放下碗筷。<br>我的所有内涵就是这句皮囊，不能用来赶浪头 … 咕哝着；接连便是难懂的话,什么「一切皆实相」、「精英的大众」,渐低的声音引的是朋友们的笑起来：饭桌上便充满了快活的空气。一个声音冒出来，你呀活的太像童话了。他重新扒拉饭的眼神亮了下，在四五人中寻到声音，微笑了一下便又暗了下去，说童话不好，太苦了。<br>苦么？辛苦的话，是有些疲惫的。虽然有更多空间去选择自由，无聊也是不会的 —— 甚至连续几十天，但一直会知道的是还有许多有价值的信息等着被翻牌，好在还有坚强。</p><p>遇见少年人不知所措，他摇摇头，很怕不那么年轻的自己永远无法被追上，便微笑作长者状说，来，我手把手教你写代码吧。<br>我问他，你因为知道更多而骄傲么；他又摇头，内心祥和喜悦。</p><h2 id="谢幕"><a href="#谢幕" class="headerlink" title="谢幕"></a>谢幕</h2><p>写了 10000 字，其实就三件事：</p><ol><li>介绍了一种看复杂问题的松耦合观点。</li><li>推演了一种以数量为中心的信息格局。</li><li>实现了一种大数量信息处理解决方案。<br>当然，配图配色也是很不错的，很惭愧，只做了一些微小的工作 …<br>以前的文章，普遍的反应是太干了，所以一方面我大水漫灌了一番，另一方面也确实扩充单篇的内容量到了一个新的水平 —— 总归是啰嗦了。方法的层面，我自己都体验调整过过分长的时间，相信你会喜欢；但是推演反演的双向求证，其实一直是我不太愿意去做的「逆周期」：最好方法就是不要问、模仿就好，不得不且有必要做时，又生怕自己「格局」不够。虽然对于没有格局的人 … 我总想着，万一有人比我懂的还少。实际操作的时候，想尝试讨论也几乎很难做到，但终归写完了。</li></ol><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>之前说过要写一写怎么「结合」个人奋斗与历史进程 … 或者说「迎合」。《清时有味是无能》写了五个月，没写成 … 我总是看不很明白历史进程的实相。虽然你从标题就能知道我的态度，是什么样的一种态度。或许有天，当我的「挥霍」汇合的时候，会再试一下，即便不是在最高点 —— 用不了很久的，当然也可能是我的态度不太对。</p><p>至于之后写什么，这篇算是「技术」主题的一个开头吧：信息无处不在、形式愈发不同，就是「杂然赋流形」了。<br>虽然在我的认识里，无「编码」不「技术」，但至少我们稍微聊了下 io 吧 … 不过你知道的，即使我在谈方法论 —— 这事儿两年前就做的很好了，其实也是在 … 其实不必知道是什么，看我就好：自然也就没有「看不懂」，只是「好看」。「好看」这事儿看来我是一意孤行 …</p><p>具体内容的话，有底稿的主题是「上上下下的网络方法」、「对象模型」（正经的 object model，而不是 … 而不是怎么去写一个类或者实例，虽然你想的三年前也用 Simulink 做过了），还有「搜索总论 —— 从注水模型到 IDA* 与 DFSBnB 的互补性」（你看，不补充点声色，还真会容易以为自己懂了点什么）。</p><p>应该不会再花三年吧，应该。我的问题在于，把主线和 storyline 攒齐、复核完关键问题、最多搜集下有趣的图片儿，就不再有操作的动力了。这事儿也没有很好的解决方案，所以先写别的也很有可能，比如 … 模型论？你知道的，不要猜也不必问我。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;「重构」个人信息系统格局&quot;&gt;&lt;a href=&quot;#「重构」个人信息系统格局&quot; class=&quot;headerlink&quot; title=&quot;「重构」个人信息系统格局&quot;&gt;&lt;/a&gt;「重构」个人信息系统格局&lt;/h1&gt;&lt;p&gt;高并发的信息流前，表现一如既往一天世界。翻滚眉头和眼睛，不知是挤出「辛酸泪」，还是看够了「荒唐言」。&lt;br&gt;我要告诉你从哪儿开始可以建立自己的信息系统。或许你会发现，真正「荒唐」的 … 只有格局。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="方法论" scheme="http://svlic.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>一个人的命运啊，当然要靠个人奋斗 …</title>
    <link href="http://svlic.github.io/2019/12/13/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%91%BD%E8%BF%90%E5%95%8A%EF%BC%8C%E5%BD%93%E7%84%B6%E8%A6%81%E9%9D%A0%E4%B8%AA%E4%BA%BA%E5%A5%8B%E6%96%97-%E2%80%A6/"/>
    <id>http://svlic.github.io/2019/12/13/%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%91%BD%E8%BF%90%E5%95%8A%EF%BC%8C%E5%BD%93%E7%84%B6%E8%A6%81%E9%9D%A0%E4%B8%AA%E4%BA%BA%E5%A5%8B%E6%96%97-%E2%80%A6/</id>
    <published>2019-12-13T04:42:03.000Z</published>
    <updated>2020-03-12T11:07:32.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个理想主义者的求职故事-（-修订-）"><a href="#一个理想主义者的求职故事-（-修订-）" class="headerlink" title="一个理想主义者的求职故事 （  修订 ）"></a>一个理想主义者的求职故事 （  修订 ）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你要知道，我不太愿意写一些解题报告（ 当然专题有空闲的精力可以试试 ），但其实挺想分享一些我的思考；也不愿意就 “ 选择 ” 说上三言两语。就在此 —— 把话说完。</p><a id="more"></a><h2 id="“-野路子-”技术栈"><a href="#“-野路子-”技术栈" class="headerlink" title="“ 野路子 ”技术栈"></a>“ 野路子 ”技术栈</h2><p>编程起点在高一——准确地说我是一个文化课还不错的正经「 NOIPer 」，当时巅峰水平无限接近「 省一 」的样子。</p><p>同行应该知道，算法竞赛是一个脑力决定上限，体力决定兑现的运动项目。<br>在兑现自己“天赋”的过程中，容易进入一种 “ 迷幻 ” 的心流：怜悯众生的淡淡忧伤、唯有算法高的 “ 冷漠 ”。之所以后来 “ 半途而废 ” 又拾起再放下，一方面是不想变得更 “ 冷漠 ”，另一方面我不认为经典算法还有突破性的工作——也许有也还是把理论计算机改变世界的事还是留给 WJMZBMR 这样的人…</p><p>后来靠文化课走到了灯红酒绿夜夜笙歌的五毛场文秘学院和冷冷清清凄凄切切的西南某高校面前。我终究是一个“ 技术 ”人，对于依托着闵行开发园丰富资源的诱惑，果断选择了灯红酒绿夜夜笙歌——这是 “ 野路子 ” 的起点。</p><p>第一年通识教育；第二年因为一些强外部原因，选择学了一年物理；第三年进入大数据学院，才算学习了 “ 一些 ” 机器学习、分布式系统的 “ 正经 ” 课程——准确地说只有两三门，更多课程是概率与统计。</p><p>于是，成了久疏战阵的算法老兵、三年两门课的伪数据科学家、不懂数据库和计算机体系的全栈工程师——谁能料到我读完 Flask 源码，Python Web 就凉的透彻心扉了。</p><h2 id="为什么选择工作"><a href="#为什么选择工作" class="headerlink" title="为什么选择工作"></a>为什么选择工作</h2><p>但我并没有很慌张，因为：</p><ol><li>一位长者告诉我，大部分技术人都是走在变得 “ 不正经 ” 的路上。</li><li>其实并没有面板上那么“不堪”，熟悉我的人也没有敢说我 “路子野” 的。主要靠课程外的学习与项目，补足了那些短板（虽然这件事儿看起来在 “ 学校 ” 里好像不太正经，但是 …）。以 data science 为例，一年级第一次自己写神经网络梯度下降，二年级涉猎 kaggle ——你要知道我对技术的爱好始终是没有跑偏的。</li><li>在贸易战之前，也做了出国的准备，所有也就没有迫切的依托专业知识就业的需求。某种意义上还针对自己的性格特点，拓展了更多 “ 野路子 ”：嵌入式通讯、区块链、投资助理、咨询顾问…… </li></ol><p>因为一些个人的强外部原因，排除了在国内继续深造的选项；因为历史进程，基于我的教育背景、生长环境与社会关系，情感上无法接受 “ 毕业后在第一世界的世界第一强国工作，寄钱到第三世界的未来世界第一强国 ”，于是 “ 颤颤巍巍 ” 准备就业。 </p><p>人啊，就是不知道…… </p><h2 id="我看到的-IT-行业"><a href="#我看到的-IT-行业" class="headerlink" title="我看到的 IT 行业"></a>我看到的 IT 行业</h2><p>或许因为程序员 “ 沉默寡言 ”，我接触到的 IT 业内的信息差巨大：在民企快乐奋斗的人、在外企快乐养老的人、在民企痛斥奋斗的人 … </p><p>出乎想象的是 —— 在客观问题上，不同角色因为本身的信息受限，对行业情况的认识出现彻底相反的情况。即便是简单地想要获取一些信息，也会受到信息来源地立场的巨大影响，第三方的信息就更是鱼目混珠了。</p><p>即便经过大量工作获取各个立场下的信息，也对个人的判断力是极大考验。我一度觉得在关键问题上，只有自己上手才知道真相。——你要知道的是因为行业分工的精细化和高差异化，问题数量的拓展速度几乎和你认知边界拓展一样快。</p><p>具体说，很多人不知道 Pivotal（很长一段时间内我最喜欢的技术公司） 这样的存在，有人觉得 BAT 对 “ 技术 ” 的定义是使用框架的熟练度——我也曾一度以为领英只是一个业务公司。</p><p>比较难的另一点是保持透明。很多时候并不是没有听到反对，而是靠躲进错觉弱化自己不愿意相信的东西。正因为热爱，尤其难保持冷静客观。</p><h2 id="我是要做-“-正经-”-工程师的男人"><a href="#我是要做-“-正经-”-工程师的男人" class="headerlink" title="我是要做 “ 正经 ” 工程师的男人"></a>我是要做 “ 正经 ” 工程师的男人</h2><p>你要知道的是，这个世界上有很多 “ 非主流 ” 工程师，具体表现为：对于一些核心知识一无所知，常常标榜一些非工程能力。我是要做正经工程师的男人。</p><p>另一方面，很多人会把选择 IT（或者金融）作为一个前提条件。即便在这个背景下，我面临的第一个选择并不是做算法或做开发，而是做技术还是做产品，甚至是 front or back office——“国定路现男友”不是白叫的，我对产品的 High touch 也是公认的。</p><p>除去技术人那份合理的骄傲，我选择技术而非产品或解决方案很多是出于外部因素。且不谈把最大的爱好作为工作的合理性，“社会人”很难依靠不稳定的主观能动性，是从“生活所迫”中汲取的无与伦比的力量。</p><p>“如果我这样的人不去做技术，那么谁还会去做技术”、“如果我这样的人去做了别的，那么谁还会相信技术”——是这样的声音让我我不得不给我的朋友们 「 打个样 」 ，给我力量去成为一名优秀工程师。当然，工程师的收入起点也确实稍高一些。</p><h2 id="开发，而非研究"><a href="#开发，而非研究" class="headerlink" title="开发，而非研究"></a>开发，而非研究</h2><p>从热度看，这个选择也是下意识地，“想什么呐，快去做算法”——甚至很多人把做开发当作「曲线救国」。</p><p>我选择做 engineer 是因为我“做不了” scientist。<br>我的 ml 的应用技术栈主要是偏向业务的 data-mining —— 虽然对深度学习在知识和实践层面是完全不怵的，在视觉、自然语言或者图谱这样的细分上，虽然撸过很多 demo，但缺少领域知识。</p><p>之所以发展出这样的技术栈是因为我对复杂程度较高的机器学习模型的 SaaS 闭环的落地场景不看好，非闭环的可用服务又十分依赖非自动化的调试。</p><p>在工作内容上，实现部分的比例并没有开发高。（现在看近半年 AutoML、what-if tool 和 MLflow 类似的工具的快速发展带来一些新的可能性……）。</p><p>在工作性质上，research 需要更多采集与挑选的操作，而不像开发重于模仿、对比和构建 —— 你会很自然的觉得研究是更高级的思维活动，但是我希望你知道的是，如果你和我一样有 “ 竞技 ” 的经验，就会知道 “ 模仿 ” 是通往卓越的主要部分——真正 make sense 的独创性研究，很可能只是在大量模仿和思考和的灵光一现；日常的 research 是一件消耗精力迅速、创造价值稀少的工作。</p><p>平台层面，工程通用性做的好的岗位十分稀缺。我对于不考虑一致性可用性的离线分析又没有兴趣，加上对 ml 算法较平坦的学习曲线的逆反心理，就选择了主攻职业发展深度和应用场景更成熟的开发岗位。<br>回过头来看，engineer 的另一个好处是不需要高的研究型学历。至于是 data-intensive engineer、ML engineer还是 backend engineer，校招的划分粒度并没有那么细致，实际工作中的角色划分也会有差异。 </p><p>个人层面，我对于 performance 的 fine-tuning 兴趣不大，对于 “ 把事情做对 ” 有兴趣，而且大的很—— 也是为什么我对 System 和 Design Pattern 有热情。等到有一天，我看到 System 中的一个部分或者一个范式需要一个通解的时候，就是我的 research moment 。</p><p>回过头来，选择偏向服务器端开发，对我意味着失去了不知道是劣势还是优势的两门课的经验，放大了没学过数据库、网络、操作系统课程的「三无」。</p><h2 id="社会经验"><a href="#社会经验" class="headerlink" title="社会经验"></a>社会经验</h2><p>面试或许是对社会人最好反馈机制了，不管在体力（比如我的血槽比较短）、性格（比如特长和弱点）、沟通（比如问题的交代）还是认知（比如面试官真正想要的）上我都在这个过程中有了很多反思。至于 “ 去哪儿 ” 反而没那么重要——既不是起点也不是终点。</p><p>策略层面，我能分享的技巧是要敢于舍弃不那么重要的东西。有朋友问我 “ 你一个上海人怎么跑到苏州去面试？ ”，我当然不会告诉他为了避开西南某高校。同理，窜到稍弱一点的学校校招会也是一举三得的：诚意、机会、面基。</p><p>实习经验上，通用软件领域的宽泛性决定了并没有“师徒传承”这样的紧密纽带的存在，所以你能做什么、你能学到什么，基本取决于主观成分。一家成熟的公司能够把核心业务的功能交给实习生开发，一定是因为实习生获取了信任，而不是老板主动给予的信任。在具体的操作层面，需要的是从售前到售后的业务层面的通盘思考，而不是局限在特定功能的实现与性能的调校。</p><p>当然对于求职市场的整体把控和专业知识的打磨肯定是核心部分。对于外企而言，“ 实习转正 ”的分量过于重要——几乎是唯一的机会，那么 “ 实习 ” 真就得带着点目的和严肃性。专业知识上——即便是我的水平也拾起了算法练习，一直到 AK 掉 AWS 才准备其它基本面。</p><p>说起来见过的 hr 里面，埃森哲的颜值基本没有对手。</p><h2 id="知识的方法论"><a href="#知识的方法论" class="headerlink" title="知识的方法论"></a>知识的方法论</h2><p>算法的话，力扣是没什么难度梯度的，去 poj 刷个几十题吧。</p><p>我要说的是，除了基础的算法能力的打磨，对领域知识的深度挖掘，其实有比较容易陷入的误区。</p><p>在专业化程度提高、稀缺性变大的过程中，也会严重的限制自己的选择面；精力有限的情况下，又容易忽视其它方面的基础知识的查漏补缺。对于校园招聘而言其实是不利的。</p><p>我的准备是针对「端到端」核心能力的打磨。</p><p>具体来说，算法层面，能够从问题抽象建模做到工程落地；数据层面，能从数据采集做到 storyline 的构建；应用层面，能从需求分析做到交互设计。</p><p>以此为抓手针对求职查漏补缺，于有了可以参考的技术边界。不会浪费精力在不太可能在笔试面试中出现的技术细节与旁支，专注于泛领域中例如网络中“ 输入 url 回车发生了什么 ”这样的核心问题。</p><p>跳出算法、基础知识、项目的传统框架，如果尝试对技术分层（行文时的分层初步模型，也不是不能用，但后来有很大改进，以后会聊到），例如，数学、模型、算法、代码、工程、设计、架构 … 培训班 or 自学，通常是从应用到原理的路径，而在学校里反之。对就业而言，培训班和学校谁更有优势？其实不管哪里，绝大多数人都只能停留在某一层或两层之间横向发展。</p><p>如果在此之上，能够具备端到端的纵向能力，就是常说的T型人才。在细分下会有优势，如果纵向连线的同时，注意三四个层面连接点的横向发展——兼顾了就业的选择面，就是求职之「王」。</p><p>当然，如果知识还停留在随便搜一篇公众号文章读一下就能进步的水平，那也不要考虑“路径”了。 </p><h2 id="理想主义与现实"><a href="#理想主义与现实" class="headerlink" title="理想主义与现实"></a>理想主义与现实</h2><p>那就，谈谈理想。</p><p>IT 行业的快速发展，背后是过去上世纪初数学和物理突破。底层学科的发展减速、动力逐渐偏向应用学科，和新能源新材料相比，data intensive 是否能够创造、推动产业快速发展、IT技术是否在近未来依然能够和三十年前一样充满魅力，是未知数。</p><p>国际层面看，中美博弈长期论调下，如何在发展路径尚不成熟的 996 民企和整体上外企核心业务远离中国且几乎没有增量的外企中选择和生存。之前的公司选择也是因为中美贸易摩擦高峰。在战略相持阶段，重要的不是选边站，而是加大自身的筹码。</p><p>国内城市中心化进程。从基础设施建设的成本角度看，城市的职责通常会走向单一化——就像纽约不太会有很多IT机会。上海作为金融中心，相比未来可能的科技中心深圳与杭州相比，并没有那么多新的机会，在上海找一个有靠谱业务背靠的不搬砖的开发工作真的不易。</p><p>行业内部看，新需求的产生主要来源于“爱”而非“科技”。换言之，软件也好互联网也好，技术不是动力因素而是实现手段。新技术如 IOT 的产业化也还需要时间。</p><p>从生活方式看，是一心寻觅自己想做的事业，全身心的投入进去，还是同时间运营着多个 side-project，亦或是曲线救国甚至更多地享乐。</p><p>理想主义说，面对这些选择的关键是知道自己究竟想要什么。</p><p>我之所以选择 IT 产业，不是因为它发展快，而是因为它变化快——它能让我有可能能影响到很多的人。那么我需要去掌管着 apache 顶级项目、能够持续出好用的东西的地方去感受；<br>我之所以选择做技术，不是因为赚钱容易，是因为做 “ 技术 ”难——难在 IT 技术搭建了可接受门槛下能够接触到的最复杂的系统、难在只有技术方法可以在数据变现时保护个人隐私，那么我需要到开始搭建大型项目的地方去模仿；<br>我之所以国内只看蚂蚁，是因为国家未来金融数字化基础设施任重道远——远在效率、技术可控，那么我需要到通用性、安全与性能兼顾的地方去实践。<br>（你知道的，至少我觉得短视频卡一点也不会怎么样 …</p><p>如果真正想做那件事，那在哪儿，在做什么，是不是在做，都不重要。重要的是在去做那件事的路上。</p><p>如果不知道想做什么，那么很可能只想赚钱；如果里里外外都想挣钱，那么一样可以走出一条路。</p><p>如果很清楚自己的方向是什么，那因为或大或小的现实，走点弯路也没什么——甚至有时候需要有意在平坦的路面上曲折前行。 </p><h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><p>一个人的命运，固然要靠个人奋斗，但也要兼顾历史的进程。我要说的是，历史的进程也要与个人奋斗结合，关于我，我是怎么看我自己的，我是怎么做的，有一首诗 …<br>这篇文章已经长的过头了，之后有机会再起一文吧。</p><p>当然，既然我还没毕业，那理想主义者的求职故事就未完待续。 </p><h2 id="一些喜欢的学习资料"><a href="#一些喜欢的学习资料" class="headerlink" title="一些喜欢的学习资料"></a>一些喜欢的学习资料</h2><p>CPP：《深入探索c++对象模型》<br>机器学习：《百面机器学习》<br>分布式系统：《数据密集型应用系统设计》《大型网站技术架构：核心原理与案例分析》<br>操作系统：《Linux就是这个范儿》<br>网络：极客时间《趣谈网络协议》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一个理想主义者的求职故事-（-修订-）&quot;&gt;&lt;a href=&quot;#一个理想主义者的求职故事-（-修订-）&quot; class=&quot;headerlink&quot; title=&quot;一个理想主义者的求职故事 （  修订 ）&quot;&gt;&lt;/a&gt;一个理想主义者的求职故事 （  修订 ）&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;你要知道，我不太愿意写一些解题报告（ 当然专题有空闲的精力可以试试 ），但其实挺想分享一些我的思考；也不愿意就 “ 选择 ” 说上三言两语。就在此 —— 把话说完。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="idealism" scheme="http://svlic.github.io/tags/idealism/"/>
    
  </entry>
  
  <entry>
    <title>如何开展深度学习（ 修订 ）</title>
    <link href="http://svlic.github.io/2018/02/28/%E5%A6%82%E4%BD%95%E5%BC%80%E5%B1%95%E6%9C%89%E6%B7%B1%E5%BA%A6%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%20%E4%BF%AE%E8%AE%A2%20%EF%BC%89/"/>
    <id>http://svlic.github.io/2018/02/28/%E5%A6%82%E4%BD%95%E5%BC%80%E5%B1%95%E6%9C%89%E6%B7%B1%E5%BA%A6%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%20%E4%BF%AE%E8%AE%A2%20%EF%BC%89/</id>
    <published>2018-02-28T04:34:56.000Z</published>
    <updated>2020-03-12T11:06:53.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何开展深度学习"><a href="#如何开展深度学习" class="headerlink" title="如何开展深度学习"></a>如何开展深度学习</h1><h2 id="非独创性声明"><a href="#非独创性声明" class="headerlink" title="非独创性声明"></a>非独创性声明</h2><p>文者，周遭成，为我知。处处皆他人成果，既是闲庭信步东拼西凑，恐难有独立视角方法。竟有会心之处，不过先得之幸——欢迎有偿无偿转载篡改便是。</p><a id="more"></a><h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>对 DL 有两种观点，一是看作 ML 分支，二是作为独立方法。如此看，我也不是偷换概念，只是有些嫌疑。<br>有缘起，未必有结果。观点上可以分为根本和导火索。前者和眼界学识息息相关，夹着许多不堪说的因素。</p><h2 id="为什么需要深度学习-？"><a href="#为什么需要深度学习-？" class="headerlink" title="为什么需要深度学习 ？"></a>为什么需要深度学习 ？</h2><p>前学院院长把摩尔定律化用在信息上，在知识生成速度（总量）指数增长时，处在学习曲线拐点之前意味着 “ 受制 ” 于发展 “ 受制 ” 的学习能力。<br>是为此文的目的与深度学习的缘起。从状态空间看，两个答案，一是提高掌握知识的加速度，二是有预见性和判断力（核心和热点），前者难说，后者不可说。<br>举个栗子。寒假为一家科技服务公司设计了算法和数据挖掘的培训，拿的说不上少。但说的上多么？用经济学的技巧回答——我愿意为我的课程支付这笔钱，它与传统 “ 培训 ” 在 “ 结构 ” 上天然不同。如果就在 Information Technology 界看，同样有意思的话题是，科班和培训的天然不同。现象上，后者往往注重 “ 能干活 ”，甚至比前者 “ 更能干 ”，但也伴随着问题——基础知识和观点的缺失。<br>我要说的是，基本面和观点也可以是不难获取的。你要知道，这样的取舍之间，才是我希望你知道的。</p><h2 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h2><p>形象地说，把学习精力（知识结构）看作一定体积的溶（融）液，选择把它摊成薄脆的杂粮煎饼，还是铸 “ 一根根 ” （注意！不是 “ 一根 ”）银针刺穴。这样的取舍，解决的也就是第二个 “ 答案 ”（不讲第一个的原因比问题本身更复杂，限于篇幅，留在两年后好好聊吧），即如何深度学习。更准确地说，在某个领域成为 “ 专家 ”（相对快速）的方法。</p><h2 id="深度学习的信息框架"><a href="#深度学习的信息框架" class="headerlink" title="深度学习的信息框架"></a>深度学习的信息框架</h2><p>从信息框架看，解决：学什么，怎么学。<br>Client角度，学习内容的产生分为，扫盲、获取和选择组合。<br>对于非知识本身和浅层知识的搜索，考察因素是成本，即了解情况和开展学习的比例分配。<br>对于资源获取，不赘述途径，就谈需规避的常见问题。<br>免费或收费的培训课程类或知识性平台（如个人博客）核心问题是“乱”。表现为同质化——降低检索效率；形式差——单一、错误、易误导。本质矛盾是受众的界定。例如，小白入门课只针对学习能力较差的群体设计，硬核内容课程为了扩大受众面节奏迟缓、过度细致。<br>专业课程与书籍在形式层面的丰富是其效率的核心竞争力。但在实践性上缺失。你知道的，复杂网络搜索，单一策略可以很快达到局部最优，关键路径消耗更多资源（之后我们也可以聊聊搜索的深层 “ 互补性 ”——当然不会浅到宽度深度一类…）。</p><p>对于资源的选择，形式上的考量是多媒体和文字的信息容量对效率的影响。内容的依据可分为人和内容本身。以人（世界观或头衔）为依据，可以降低获取成本。例如我很喜欢 Gibert Strang 的线性代数，于是学习了他的微积分课程，同样收获良多。虽然无法预知学习其它课程的收获，但考量我个人较高的搜索成本，绝对是个 “ 足够好 ” 的选择。<br>基于内容的考察，决定性的环节是在获取活动中，学习中穿插的挑选行为离散性是对精力的损耗。</p><p>对于扎针，宏观上两组分配，了解和学习知识的比例、挑选或搜索资源与学习的比例——这在微观层面也存在。中观涉及技术路线的规划，即 learning path 设计，符合整体的针对性思路。微观的具体执行，手段是抽象和细分，抽象实现对目标的具体化（这边有一个看似矛盾的点）和筛选，为实用性学习路径整体界限、增加局部广度，突破“只能干”的瓶颈。细分利用学习曲线分形，缩短反馈周期，在练习中监督加强的反馈效果。以 qq 飞车手游（行文时在玩儿的游戏）为例，在常见漂移技术都掌握后，产生不同的是动作衔接和失误率。运用抽象把问题变成直道保持和过弯动作两方面；利用细分，需要练习的技术是车身控制、过弯预判，包括路径选择——这些小技术是可以在练习中直观得到反馈的。</p><h2 id="深度学习的流型框架"><a href="#深度学习的流型框架" class="headerlink" title="深度学习的流型框架"></a>深度学习的流型框架</h2><p>从流程上对“如何深度学习”做一下整理。</p><p>在普通的一天，普通的路人想找点不普通的感觉，于是他决定在某个领域有所深度的学习。他想了想自己的目标。是要拍出好的照片，还是能自己办摄影展，是闷声发大财，还是要能谈笑风生，和你说清自己的思想并加以传播。<br>他所希望达到具体表现是，对现象有很本质的认识、对问题与方法在其它领域拓展迁移。体系上的标志是，对非结构性（即自然主义的）的知识有结构性的总结把握；理解结构性知识现有结构产生的缘由和组织逻辑、基于某个 key（例如本文的 “ 方法论 ”）对结构性知识有新的组织。</p><p>在进行简单扫盲后，他选择了扎下针的位置，就像 Irish Michailidis 在进入kaggle时选择了自己熟悉的经济学方向，就像我基于 Dynamic Programming 铺开决策模型的培训规划。<br>他花了一些精力和金钱，找到了（足够/最）好的资源。他知道这些花费是有意义的，我的一位艺术家朋友曾经说过，审美好很只是因为你见过好的东西多。无法想象一个只见过7分文章的人能写出8分的文章来——好东西肯定有，15213、甚至像宏魔 Taran(LTT) 的剪辑教程，提高了6倍粗剪速度（还可以有更超出常理的 “ 好 ” 么 ？）</p><p>开始实践后，有时候很顺畅。遇到问题他也兼听则明，在形式上求变，把市面上比较好的所有辅导书在有问题部分的讲解全看了一下，有时候会有错觉——不觉得自己学而无术。</p><h2 id="未必，有结果"><a href="#未必，有结果" class="headerlink" title="未必，有结果"></a>未必，有结果</h2><p>朋友碰到相似问题，他推推普通的玳瑁黑框眼镜，略一思索给出答案和获取答案的方法——专家似的。当然也有他不知道时候，“ 术业有专攻 ” 就搪塞过去了，真要细细一看不知道的内容，对已经越过拐点的自己而言，也不多晦涩。</p><p>时间精力甚至头发花去了不少，蓦然回首，发现还是少了一丝悠然，确是有尴尬和哀伤，不变的赤诚是一颗初学者之心。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何开展深度学习&quot;&gt;&lt;a href=&quot;#如何开展深度学习&quot; class=&quot;headerlink&quot; title=&quot;如何开展深度学习&quot;&gt;&lt;/a&gt;如何开展深度学习&lt;/h1&gt;&lt;h2 id=&quot;非独创性声明&quot;&gt;&lt;a href=&quot;#非独创性声明&quot; class=&quot;headerlink&quot; title=&quot;非独创性声明&quot;&gt;&lt;/a&gt;非独创性声明&lt;/h2&gt;&lt;p&gt;文者，周遭成，为我知。处处皆他人成果，既是闲庭信步东拼西凑，恐难有独立视角方法。竟有会心之处，不过先得之幸——欢迎有偿无偿转载篡改便是。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="方法论" scheme="http://svlic.github.io/tags/%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>About Me ( to Be Continued )</title>
    <link href="http://svlic.github.io/2016/06/19/About-Me/"/>
    <id>http://svlic.github.io/2016/06/19/About-Me/</id>
    <published>2016-06-19T13:36:19.000Z</published>
    <updated>2020-02-21T12:52:13.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h1><p>I love order;<br>I choose risk.<br>&nbsp;</p><a id="more"></a><p>I love abstration;<br>I choose concrete.<br>&nbsp;</p><p>I love algorithm;<br>I choose application.<br>&nbsp;</p><p>I love realism;<br>I choose idealism.<br>&nbsp;</p><p>I love reason;<br>I choose sense.<br>&nbsp;</p><p>I love Big picture;<br>I choose High touch.<br>&nbsp;</p><p>I love maths;<br>I choose physics.<br>&nbsp;</p><p>I love silence and money;<br>I choose presentation.<br>&nbsp;</p><p>I love impressionism;<br>I choose pop.<br>&nbsp;</p><p>I love research;<br>I choose imatation.<br>&nbsp;</p><p>I love product;<br>I choose tech.<br>&nbsp;</p><p>I love engineering;<br>I choose Fudan.<br>&nbsp;</p><p>I love full stack;<br>I choose backend.<br>&nbsp;</p><p>I love Arch;<br>I choose Manjaro.<br>&nbsp;</p><p>I love Python;<br>I choose cpp.<br>&nbsp;</p><p>I love finance;<br>I choose economics.<br>&nbsp;</p><p>I love data;<br>I choose system.<br>&nbsp;</p><p>I love deep learning;<br>I choose data mining.<br>&nbsp;</p><p>I love Jetbrains;<br>I choose Sublime.<br>&nbsp;</p><p>I love material design;<br>I choose objectification.<br>&nbsp;</p><p>I love chromium;<br>I choose quantum.<br>&nbsp;</p><p>I love MapReduce;<br>I choose MPP.<br>&nbsp;</p><p>I love AREUOK;<br>I choose Smartisan.<br>&nbsp;</p><p>I love classical music;<br>I choose newage folk.<br>&nbsp;</p><p>I love folks;<br>I choose solo.<br>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;About-me&quot;&gt;&lt;a href=&quot;#About-me&quot; class=&quot;headerlink&quot; title=&quot;About me&quot;&gt;&lt;/a&gt;About me&lt;/h1&gt;&lt;p&gt;I love order;&lt;br&gt;I choose risk.&lt;br&gt;&amp;nbsp;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="poem" scheme="http://svlic.github.io/tags/poem/"/>
    
  </entry>
  
</feed>
